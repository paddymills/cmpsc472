
// *******************************************
// *  utility functions called by processes  *
// *******************************************

semaphore num_seated_mutex;     // mutual exclusion for num_num_seated_mutex
semaphore done_eating_mutex;    // mutual exclusion for done_eating
semaphore turkey_can_be_carved; // turkey is ready to be carved
semaphore turkey_is_carved;     // turkey is carved
semaphore can_be_excused;       // everyone is ready to be excused
semaphore excused;              // to be excused

int num_seated = 0;             // number of people num_seated_mutex at table
int done_eating = 0;            // number of people who have finished eating
const int ACTION_LEN = 64;      // length of action string
const int NUM_OTHERS = 15;      // number of people not father (1 mother + 8 children + 6 relatives)
const int NAME_LEN = 16;        // length of all name strings

// person types for queue
const int MOTHER_TYPE   = 1;
const int RELATIVE_TYPE = 2;
const int CHILD_TYPE    = 3;

int hayride_pids[3];            // because baci cannot take a array pointer as an argument
int hayride_size;               // number of people on built hayride

void init_thanksgiving() {
    // initialize semaphores
    initialsem(num_seated_mutex, 1);
    initialsem(done_eating_mutex, 1);
    initialsem(turkey_can_be_carved, 0);
    initialsem(turkey_is_carved, 0);
    initialsem(can_be_excused, 0);
    initialsem(excused, 0);
}

atomic void print(string str) {
    // all prints MUST use this method
    cout << str << endl;
}

void delay(int duration) {
    // imitate a passage of time

    int i;
    int delay;
    
    delay = random(duration * 10); 
    for (i = 0; i < delay; i++);
}
