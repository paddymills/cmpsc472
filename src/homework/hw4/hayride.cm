// calculates the persons name
//    i.e. p_type=2, p_id=5 -> `Relative 5`
void append_person_name(string str, int p_type, int p_id) {
    if (p_type == MOTHER_TYPE) {
        sprintf(str, "%s Mother", str);
    }
    else if (p_type == RELATIVE_TYPE) {
        sprintf(str, "%s Relative %d", str, p_id);
    }
    else {
        sprintf(str, "%s Child %d", str, p_id);
    }
}

void build_hayride() {
    // builds a hayride by adding people
    //    in order they are in the queue (FIFO)

    int i, i_type, i_id;    // for iteration

    int mother_index = -1;  // where in the queue mother  is (-1 is not found)
    int child8_index = -1;  // where in the queue Child 8 is (-1 is not found)
    int picked[3];          // array for calculating hayride (store array indexes)
    int num_adults = 0;     // number of adults added to ride
    int num_children = 0;   // number of children added to ride
    hayride_size = 0;       // number of people added to hayride (hayride_size == num_children + num_adults)

    // lock queue
    wait(access);
    
        // reset hayride
        for (i=0; i<3; i++) {
            hayride_pids[i] = 0;
        }

        for (i = 0; i < end; i++) {
            i_type = types[i];  // store person type at index i
            i_id = type_ids[i]; // store person id at index i

            // mother or child 8
            if ( i_type == MOTHER_TYPE || ( i_type == CHILD_TYPE && i_id == 8 ) ) {
                // find mother and child8 indexes
                for (i=0; i<end; i++) {
                    i_type = types[i];
                    i_id = type_ids[i];
                    
                    //checks if current id is the mother 
                    if ( i_type == MOTHER_TYPE )
                        mother_index = i;

                    else if ( i_type == CHILD_TYPE && i_id == 8 ) //checks if current
                        child8_index = i;                         //id is child8  
                }

                // check if mother and child 8 are in queue
                if ( mother_index > -1 && child8_index > -1 ) {
                    // mother and child ride together
                    if ( num_children < 2 && num_adults == 0) {
                        // add mother
                        picked[hayride_size] = mother_index;
                        hayride_size++;
                        num_adults++;

                        // add child
                        picked[hayride_size] = child8_index;
                        hayride_size++;
                        num_children++;
                    }
                }
                // else: mother or child8 not in queue
                //         they will ride in a later hayride
            }

            // adult
            else if ( i_type == RELATIVE_TYPE ) {
                if ( num_adults == 0 && num_children < 3 ) {
                    picked[hayride_size] = i;
                    hayride_size++;
                    num_adults++;
                }
                else if ( num_adults < 2 && num_children == 0 ) {
                    picked[hayride_size] = i;
                    hayride_size++;
                    num_adults++;
                }
            }

            // child
            else if ( i_type == CHILD_TYPE ) {
                if ( num_adults == 0 && num_children < 3 ) {
                    picked[hayride_size] = i;
                    hayride_size++;
                    num_children++;
                }
                else if ( num_adults == 1 && num_children < 2 ) {
                    picked[hayride_size] = i;
                    hayride_size++;
                    num_children++;
                }
            }

            // exit loop if full hayride is built
            if (num_adults == 2 || (num_adults == 1 && num_children == 2) || num_children == 3)
                break;
        }

        // collect PIDs
        for (i=0; i<hayride_size; i++) {
            hayride_pids[i] = procs[picked[i]];
        }

    // unlock queue
    signal(access);
}

void get_hayrider_names(string output) {
    string[NAME_LEN] person1, person2, person3;
    int i;    // for iteration
    
    // lock queue
    wait(access);

        // get person 1 name
        i = get_queue_index(hayride_pids[0]);
        append_person_name(person1, types[i], type_ids[i]);

        // if person 2, get person 2 name
        if ( hayride_size > 1 ) {
            i = get_queue_index(hayride_pids[1]);
            append_person_name(person2, types[i], type_ids[i]);
        }

        // if person 3, get person 3 name
        if ( hayride_size == 3 ) {
            i = get_queue_index(hayride_pids[2]);
            append_person_name(person3, types[i], type_ids[i]);
        }

        // ******************* calc output *******************
        stringCopy(output, person1);
        // output = `{person1}`

        // if 3 riders in hayride
        if ( hayride_size == 3 ) {
            stringConcat(output, ", ");
            stringConcat(output, person2);
            
            stringConcat(output, " and ");
            stringConcat(output, person3);
            // output = `{person1}, {person2} and {person3}`
        }
        
        else if ( hayride_size == 2 ) {
            stringConcat(output, " and ");
            stringConcat(output, person2);
            // output = `{person1} and {person2}`
        }

    // unlock queue
    signal(access);
}
