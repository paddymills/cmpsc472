
const int QUEUE_SIZE = 16;

int end = 0;
int procs[QUEUE_SIZE];
int types[QUEUE_SIZE];
int type_ids[QUEUE_SIZE];

// types array: array of corresponding types for each person
//    see utils.cm

semaphore access = 1;   // mutual exclusion for queue

void enqueue(int p_type, int p_id) {
    // add a person to the queue
    wait(access);
        procs[end] = which_proc();  // store calling process's PID
        types[end] = p_type;
        type_ids[end] = p_id;

        end++;
    signal(access);
}

void dequeue(int pid) {
    // TODO: document this
    // remove a person from the queue by a given PID
    int i;
    int found = 0;  // has PID been found
    
    wait(access);
        // delete item
        for (i=0; i<QUEUE_SIZE; i++) {
            if ( procs[i] == pid )
                found = 1;

            if ( found == 1 && i < QUEUE_SIZE-1 ) {
                procs[i] = procs[i+1];
                types[i] = types[i+1];
                type_ids[i] = type_ids[i+1];
            }
        }

        for (i=0; i<QUEUE_SIZE; i++) {
            if ( procs[i] == 0 ) {
                end = i;
                break;
            }
        }
    signal(access);
}

int get_queue_index(int pid) {
    int i;
    for (i=0; i<end; i++) {
        if ( procs[i] == pid )
            return i;
    }

    return -1;
}
