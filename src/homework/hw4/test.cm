
#include <queue.cm>

int needs_ride = 15;
const int NOT_A_PROC = 64;

binarysem access = 1;

void give_rides() {
    string[64] on_ride;

    int i;
    while (needs_ride > 0) {
        stringCopy(on_ride, "");
        for (i=0; i<3; i++)
            hayride_pids[i] = NOT_A_PROC;

        build_ride(on_ride);

        wait(access);
            cout << "Father gives hayride to ";
            cout << on_ride << endl;
        signal(access);

        for (i=0; i<3; i++) {
            if (hayride_pids[i] = NOT_A_PROC)
                break;

            revive(hayride_pids[i]);
            needs_ride--;
        }
    }
}

void proc(int t, int i) {
    enqueue(which_proc(), t, i);

    suspend();

    wait(access);
        if (t == 1)
            cout << "Adult";
        else
            cout << "Child";

        cout << " gets a ride" << endl;
    signal(access);
}

main() {
    cobegin {
        // mother
        proc(0, 0);

        // relatives
        proc(1, 1);
        proc(1, 2);
        proc(1, 3);
        proc(1, 4);
        proc(1, 5);
        proc(1, 6);
        
        // children
        proc(2, 1);
        proc(2, 2);
        proc(2, 3);
        proc(2, 4);
        proc(2, 5);
        proc(2, 6);
        proc(2, 7);
        proc(3, 8);

        give_rides();
    }
}