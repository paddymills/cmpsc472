//***************************************************
//** HW#3 Problem 2d:                              **
//**               order.cm                        **
//**                                               **
//**    Patrick Miller                             **
//**      pjm6196                                  **
//***************************************************

semaphore p1done, p2done;

///////////////////////////////////
atomic  void PrintOut(int pid)
{
  switch (pid)
  {  case 1: 
     {cout << "Process 1" << endl; break;}
     case 2: 
     {cout << "Process 2"  << endl; break;}
     case 3: 
     {cout << "Process 3" << endl; break;}
  } 
}


///////////////////////////////////
void Process1()
{
  int i;
  for(i=0; i<3; i++) {
    PrintOut(1); 
  }

  // signal process1 done -> unblock process2
  signal(p1done);
}


///////////////////////////////////
void Process2()
{
  int i;
  wait(p1done);
  for(i=0; i<3; i++) {
    PrintOut(2); 
  }

  // signal process2 done -> unblock process3
  signal(p2done);
}


///////////////////////////////////
void Process3()
{
  int i;
  wait(p2done);
  for(i=0; i<3; i++) {
    PrintOut(3); 
  }
}


///////////////////////////////////
main()
{
  // initialize all semephores as 0
  //   to block their wait calls
  initialsem(p1done, 0);
  initialsem(p2done, 0);
  
  cobegin {     // This will run all 3 processes concurrently
    Process1(); 
    Process2(); 
    Process3();
  }
}
