/* This program shows the implementation of a 
   general semaphore as a monitor. Based on code 
   by Bynaum and Camp.                           */
///////////////////////////////////////////////////

const int m = 5;
int sum;     //shared resource

monitor monSemaphore {

int semvalue;
condition notbusy;

void monP()
  {
    if (!semvalue)
       waitc(notbusy);
    else
       semvalue--;
  }

void monV()
  {
     if (empty(notbusy))
        semvalue++;
     else
         signalc(notbusy);
   }

   init{semvalue = 1;}
}      //end of monitor

 

 void incr (char id)
     {
       int i;
       for ( i = 1; i <= m; i = i + 1)
        {
          monP();        
         sum = sum + 1;
         cout << id << " sum =" << sum ;
         cout << "  " << id << endl;
          monV();
         }
      }

main()
   {
       cout << endl;
        sum = 0;
         cobegin 
          {
           incr ( 'A'); incr ('B'); incr ( 'C');
           }
       cout << "The sum is "<< sum <<endl;

   }
