/* This program illustrates how monitors can be used
   to synchronize processes and force a particular order    */
/////////////////////////////////////////////////////////////

monitor simple_monitor 
{ 
  int finish; 
  condition C_wait; 

  void say_hello (char id) 
  { 
    if ( id == 'C' ) 
    { 
      if ( finish != 2 ) 
        waitc( C_wait ); 
    } 
   
    cout << "hello from process " << id << endl; 
    
    if ( id != 'C' ) 
    { 
      finish++; 
      // cout << "id is" << id << " and finish is " << finish << endl; 
      if ( finish == 2 ) 
        signalc( C_wait ); 
    } 
  } 

  // initialize the integer values to 0 
  init 
  { 
    finish = 0; 
  } 
} 

void A() 
{ 
  say_hello( 'A' ); 
} 

void B() 
{ 
  say_hello( 'B' ); 
} 

void C() 
{ 
  say_hello( 'C' ); 
} 

main() 
{ 
  cobegin 
  { 
    A(); B(); C(); 
  } 
  cout << " all finished " << endl; 
}
