// Dining Philosophers Problem

const  int DoomsDay = 0; //false

monitor dining_philosophers {
   const int Eating   = 0;  // do-it-yourself enumerated type 
   const int Hungry   = 1;
   const int Thinking = 2;

   int i;                  //init loop variable
   int state[5];           //Eating, Hungry, Thinking
   condition self[5];      // one for each Philospher 
   // place for Hungry Ph to wait until chopsticks become available 

void test(int k){
  // if k's left & right neighbors aren't Eating & k is Hungry 
  // then change k's state to Eating & signalc (in case k is waitc-ing)

   if (state[(k+4)%5] != Eating)       //left neighbor
      if (state[k] == Hungry)         
        if (state[(k+1)%5] != Eating)  //right neighbor
        {
          state[k] = Eating;
          signalc(self[k]); //tell k to eat if k is waitc-ing
        }; //endif
} //end test

void pickup(int i) {
   state[i] = Hungry;
   cout << "philosopher "<< i << " hungry" << endl;
   test(i); // are my neighbors eating? 
   if (state[i] != Eating)  //waitc if they are
      waitc(self[i]);
   cout << "philosopher " << i << " eating" << endl;
} //pickup

void putdown(int i) {
   state[i] = Thinking;
   cout << "philosopher "<< i << " thinking " << endl;
   test( (i+4) % 5); // give left neighbor chance to eat 
   test( (i+1) % 5); // give right neighbor chance to eat 
}  // putdown

init{ 
    for (i=0;i<4;i++) 
       state[i] = Thinking; 
    }

}  // end dining_philosopher monitor

void philosopher(int i)
{
  while (!DoomsDay){ 
      pickup(i);  // pick up chopsticks 
         // eat
      putdown(i); // put down chopsticks 
         // think
  }; //endwhile 
} //end philosopher

main()
{
   cobegin {
      philosopher(0); philosopher(1); philosopher(2);
      philosopher(3); philosopher(4);
   };
}
