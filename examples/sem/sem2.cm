int readcount, writecount = 0;
semaphore mutex1;
semaphore mutex2;
semaphore wsem; // provide writers with mutual exclusion
semaphore rsem; // inhibit readers when a writer is in CS
semaphore write_pending;

void reader(int i) {
	wait(write_pending);
		wait(rsem);
			wait(mutex1);
				readcount++;
				if (readcount == 1) wait(wsem);
			signal(mutex1);
		signal(rsem);
	signal(write_pending);

	// <read>
	cout << "[R" << i << "] " << "read..." << endl;

	wait(mutex1);
		readcount--;
		if (readcount == 0) signal(wsem);
	signal(mutex1);
}

void writer(int i) {
	wait(mutex2);
		writecount++;
		if (writecount == 1) wait(rsem);
	signal(mutex2);

	wait(wsem);
		// <write>
	    cout << "[W" << i << "] " << "write..." << endl;
	signal(wsem);

	wait(mutex2);
		writecount--;
		if (writecount == 0) signal(rsem);
	signal(mutex2);
}

main() {
    initialsem(mutex1, 1);
    initialsem(mutex2, 1);
    initialsem(wsem, 1); // provide writers with mutual exclusion
    initialsem(rsem, 1);
    initialsem(write_pending, 1);

	writer(1);
	reader(1);
	reader(2);
}
